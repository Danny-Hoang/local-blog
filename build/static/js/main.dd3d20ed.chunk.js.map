{"version":3,"sources":["components/MyEditor.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["EditorState","Draft","Editor","RichUtils","getDefaultKeyBinding","StyleButton","props","className","active","onMouseDown","e","preventDefault","onToggle","style","label","BLOCK_TYPES","BlockStyleControls","editorState","selection","getSelection","blockType","getCurrentContent","getBlockForKey","getStartKey","getType","map","type","key","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has","MyEditor","v","React","useState","createEmpty","setEditorState","value","setValue","editorRef","useRef","toggleBlockType","inlineStyle","toggleInlineStyle","onClick","console","log","onPaste","data","htmlData","clipboardData","getData","replace","axios","post","content","then","response","newValue","html","catch","error","margin","width","dangerouslySetInnerHTML","__html","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"uQAOgBA,G,cAAiDC,IAAzDC,OAAyDD,IAAjDD,aAAaG,EAAoCF,IAApCE,UAAoCF,IAAzBG,qBAoBxC,IAAMC,EAAc,SAACC,GAEjB,IAKIC,EAAY,yBAIhB,OAHID,EAAME,SACND,GAAa,4BAGb,0BAAMA,UAAWA,EAAWE,YAVf,SAAAC,GACbA,EAAEC,iBACFL,EAAMM,SAASN,EAAMO,SAShBP,EAAMQ,QAMbC,EAAc,CAChB,CAAED,MAAO,KAAMD,MAAO,cACtB,CAAEC,MAAO,KAAMD,MAAO,cACtB,CAAEC,MAAO,KAAMD,MAAO,gBACtB,CAAEC,MAAO,KAAMD,MAAO,eACtB,CAAEC,MAAO,KAAMD,MAAO,eACtB,CAAEC,MAAO,KAAMD,MAAO,cACtB,CAAEC,MAAO,aAAcD,MAAO,cAC9B,CAAEC,MAAO,KAAMD,MAAO,uBACtB,CAAEC,MAAO,KAAMD,MAAO,qBACtB,CAAEC,MAAO,aAAcD,MAAO,eAG5BG,EAAqB,SAAAV,GAAU,IACzBW,EAAgBX,EAAhBW,YACFC,EAAYD,EAAYE,eACxBC,EAAYH,EACbI,oBACAC,eAAeJ,EAAUK,eACzBC,UACL,OACI,yBAAKjB,UAAU,uBACVQ,EAAYU,KAAI,SAAAC,GAAI,OACjB,kBAAC,EAAD,CACIC,IAAKD,EAAKZ,MACVN,OAAQkB,EAAKb,QAAUO,EACvBN,MAAOY,EAAKZ,MACZF,SAAUN,EAAMM,SAChBC,MAAOa,EAAKb,aAO5Be,EAAgB,CAChB,CAAEd,MAAO,OAAQD,MAAO,QACxB,CAAEC,MAAO,SAAUD,MAAO,UAC1B,CAAEC,MAAO,YAAaD,MAAO,aAC7B,CAAEC,MAAO,YAAaD,MAAO,SAE3BgB,EAAsB,SAAAvB,GACxB,IAAMwB,EAAexB,EAAMW,YAAYc,wBAEvC,OACI,yBAAKxB,UAAU,uBACVqB,EAAcH,KAAI,SAAAC,GAAI,OACnB,kBAAC,EAAD,CACIC,IAAKD,EAAKZ,MACVN,OAAQsB,EAAaE,IAAIN,EAAKb,OAC9BC,MAAOY,EAAKZ,MACZF,SAAUN,EAAMM,SAChBC,MAAOa,EAAKb,aAiIjBoB,MAzHf,WAAqB,IAyEKC,EAzEN,EAEsBC,IAAMC,UACxC,kBAAMpC,EAAYqC,iBAHN,mBAETpB,EAFS,KAEIqB,EAFJ,OA4CUF,mBAAS,IA5CnB,mBA4CTG,EA5CS,KA4CFC,EA5CE,KA6EVC,EAAYN,IAAMO,OAAO,MAM/B,OACI,yBAAKnC,UAAU,mBACX,kBAAC,EAAD,CACIU,YAAaA,EACbL,SAzDY,SAACQ,GACrBkB,EAAenC,EAAUwC,gBAAgB1B,EAAaG,OA0DlD,kBAAC,EAAD,CACIH,YAAaA,EACbL,SA1Dc,SAACgC,GACvBN,EACInC,EAAU0C,kBAAkB5B,EAAa2B,OA0DzC,4BAAQE,QAxBH,cAwBL,QACA,yBAAKvC,UAZG,oBAYmBuC,QAfrB,WACVC,QAAQC,IAAIP,KAeJ,8BACIF,MAAOA,EACPU,QApDI,SAACvC,EAAGwC,GACpB,IAAMC,EAAWzC,EAAE0C,cAAcC,QAAQ,aACzCF,EAASG,QAAQ,WAAW,IAC5BH,EAASG,QAAQ,aAAa,IAC9BH,EAASG,QAAQ,WAAW,IAC5BH,EAASG,QAAQ,aAAa,IAG9BC,IAAMC,KAAK,WAAY,CACnBC,QAASN,IAEVO,MAAK,SAAUC,GACd,IAAMC,EAAWD,EAAST,KAAKW,KAC/Bd,QAAQC,IAAIY,GACZpB,EAASoB,MAEVE,OAAM,SAAUC,GACfhB,QAAQC,IAAIe,SAsCR,yBAAKlD,MAAO,CAAEmD,OAAQ,SAAUC,MAAO,QAASC,yBA3BtChC,EA2B4EK,EA1BvF,CAAC4B,OAAQjC,SCtKTkC,MATf,WACI,OACI,yBAAK7D,UAAU,OAAf,OAEI,kBAAC,EAAD,QCGQ8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMqB,a,6EEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.dd3d20ed.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Draft from \"draft-js\";\r\nimport axios from 'axios';\r\nimport 'draft-js/dist/Draft.css';\r\nimport './rich.css'\r\n\r\nconst { Editor, EditorState, RichUtils, getDefaultKeyBinding } = Draft;\r\n// Custom overrides for \"code\" style.\r\nconst styleMap = {\r\n    CODE: {\r\n        backgroundColor: \"rgba(0, 0, 0, 0.05)\",\r\n        fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\r\n        fontSize: 16,\r\n        padding: 2\r\n    }\r\n};\r\n\r\nfunction getBlockStyle(block) {\r\n    switch (block.getType()) {\r\n        case \"blockquote\":\r\n            return \"RichEditor-blockquote\";\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nconst StyleButton = (props) => {\r\n\r\n    const onToggle = e => {\r\n        e.preventDefault();\r\n        props.onToggle(props.style);\r\n    };\r\n\r\n    let className = \"RichEditor-styleButton\";\r\n    if (props.active) {\r\n        className += \" RichEditor-activeButton\";\r\n    }\r\n    return (\r\n        <span className={className} onMouseDown={onToggle}>\r\n            {props.label}\r\n        </span>\r\n    );\r\n}\r\n\r\n\r\nconst BLOCK_TYPES = [\r\n    { label: \"H1\", style: \"header-one\" },\r\n    { label: \"H2\", style: \"header-two\" },\r\n    { label: \"H3\", style: \"header-three\" },\r\n    { label: \"H4\", style: \"header-four\" },\r\n    { label: \"H5\", style: \"header-five\" },\r\n    { label: \"H6\", style: \"header-six\" },\r\n    { label: \"Blockquote\", style: \"blockquote\" },\r\n    { label: \"UL\", style: \"unordered-list-item\" },\r\n    { label: \"OL\", style: \"ordered-list-item\" },\r\n    { label: \"Code Block\", style: \"code-block\" }\r\n];\r\n\r\nconst BlockStyleControls = props => {\r\n    const { editorState } = props;\r\n    const selection = editorState.getSelection();\r\n    const blockType = editorState\r\n        .getCurrentContent()\r\n        .getBlockForKey(selection.getStartKey())\r\n        .getType();\r\n    return (\r\n        <div className=\"RichEditor-controls\">\r\n            {BLOCK_TYPES.map(type => (\r\n                <StyleButton\r\n                    key={type.label}\r\n                    active={type.style === blockType}\r\n                    label={type.label}\r\n                    onToggle={props.onToggle}\r\n                    style={type.style}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nvar INLINE_STYLES = [\r\n    { label: \"Bold\", style: \"BOLD\" },\r\n    { label: \"Italic\", style: \"ITALIC\" },\r\n    { label: \"Underline\", style: \"UNDERLINE\" },\r\n    { label: \"Monospace\", style: \"CODE\" }\r\n];\r\nconst InlineStyleControls = props => {\r\n    const currentStyle = props.editorState.getCurrentInlineStyle();\r\n\r\n    return (\r\n        <div className=\"RichEditor-controls\">\r\n            {INLINE_STYLES.map(type => (\r\n                <StyleButton\r\n                    key={type.label}\r\n                    active={currentStyle.has(type.style)}\r\n                    label={type.label}\r\n                    onToggle={props.onToggle}\r\n                    style={type.style}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nfunction MyEditor() {\r\n\r\n    const [editorState, setEditorState] = React.useState(\r\n        () => EditorState.createEmpty(),\r\n    );\r\n\r\n\r\n    const handleKeyCommand = (command, editorState) => {\r\n        const newState = RichUtils.handleKeyCommand(editorState, command);\r\n        if (newState) {\r\n            setEditorState(newState);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const mapKeyToEditorCommand = (e) => {\r\n        if (e.keyCode === 9 /* TAB */) {\r\n            const newEditorState = RichUtils.onTab(\r\n                e,\r\n                editorState,\r\n                4 /* maxDepth */\r\n            );\r\n            if (newEditorState !== editorState) {\r\n                setEditorState(newEditorState);\r\n            }\r\n            return;\r\n        }\r\n        return getDefaultKeyBinding(e);\r\n    }\r\n    const toggleBlockType = (blockType) => {\r\n        setEditorState(RichUtils.toggleBlockType(editorState, blockType));\r\n    }\r\n    const toggleInlineStyle = (inlineStyle) => {\r\n        setEditorState(\r\n            RichUtils.toggleInlineStyle(editorState, inlineStyle)\r\n        );\r\n    }\r\n\r\n    const handleBeforeInput = (e, data) => {\r\n    }\r\n    const handlePlastedText = (e, data) => {\r\n    }\r\n\r\n    const [value, setValue] = useState('');\r\n    const handlePaste = (e, data) => {\r\n        const htmlData = e.clipboardData.getData('text/html');\r\n        htmlData.replace(/\\<body\\>/,'');\r\n        htmlData.replace(/\\<\\/body\\>/,'');\r\n        htmlData.replace(/\\<html\\>/,'');\r\n        htmlData.replace(/\\<\\/html\\>/,'');\r\n        // setValue(htmlData);\r\n\r\n        axios.post('/article', {\r\n            content: htmlData\r\n          })\r\n          .then(function (response) {\r\n            const newValue = response.data.html;\r\n            console.log(newValue);\r\n            setValue(newValue);\r\n          })\r\n          .catch(function (error) {\r\n            console.log(error);\r\n          });\r\n    }\r\n    const handlePastedfiles = (e) => {\r\n        console.log(e)\r\n    }\r\n\r\n    const save = () => {\r\n        \r\n    }\r\n\r\n    function createMarkup(v) {\r\n        return {__html: v};\r\n      }\r\n\r\n    const editorRef = React.useRef(null);\r\n\r\n    const focus = () => {\r\n        console.log(editorRef)\r\n    }\r\n    let className = \"RichEditor-editor\";\r\n    return (\r\n        <div className=\"RichEditor-root\">\r\n            <BlockStyleControls\r\n                editorState={editorState}\r\n                onToggle={toggleBlockType}\r\n            />\r\n            <InlineStyleControls\r\n                editorState={editorState}\r\n                onToggle={toggleInlineStyle}\r\n            />\r\n            <button onClick={save}>Save</button>\r\n            <div className={className} onClick={focus}>\r\n                <textarea \r\n                    value={value}\r\n                    onPaste={handlePaste}\r\n                />\r\n\r\n                <div style={{ margin: '0 auto', width: '50vw'}} dangerouslySetInnerHTML={createMarkup(value)}></div>\r\n\r\n                {/* <Editor\r\n                    blockStyleFn={getBlockStyle}\r\n                    customStyleMap={styleMap}\r\n                    editorState={editorState}\r\n                    handleKeyCommand={handleKeyCommand}\r\n                    keyBindingFn={mapKeyToEditorCommand}\r\n                    handleBeforeInput={handleBeforeInput}\r\n                    editorState={editorState} \r\n                    handlePastedFiles={handlePastedfiles}\r\n                    onChange={setEditorState} \r\n                    handlePastedText={handlePlastedText}\r\n                    ref={editorRef}\r\n                />; */}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyEditor;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MyEditor from 'components/MyEditor';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            Blog\n            <MyEditor />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}